var g=Object.defineProperty;var m=(n,s,r)=>s in n?g(n,s,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[s]=r;var i=(n,s,r)=>m(n,typeof s!="symbol"?s+"":s,r);(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))a(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const o of t.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function r(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function a(e){if(e.ep)return;e.ep=!0;const t=r(e);fetch(e.href,t)}})();const b=".circular-progress-bar{padding:26px;border-radius:24px;background-color:var(--card-background-color)}@media (orientation: landscape){.circular-progress-bar{width:568px;height:320px}}@media (orientation: portrait){.circular-progress-bar{width:320px;height:568px}}.circular-progress-bar__wrapper{width:100%;height:100%;position:relative;display:flex;justify-content:center;align-items:center;gap:90px}@media (orientation: landscape){.circular-progress-bar__wrapper{flex-direction:row}}@media (orientation: portrait){.circular-progress-bar__wrapper{flex-direction:column}}::slotted(.circular-progress-bar__title){position:absolute;top:0;left:0;font-weight:400}";function d(n){return n===""||n==="true"}const l=["value","animate","hide"],f=`<form class="circular-progress-bar__settings">\r
  <div class="circular-progress-bar__value">\r
    <input type="number" id="value" name="value" min="0" max="100" />\r
    <label for="value">Value</label>\r
  </div>\r
\r
  <div class="circular-progress-bar__animate">\r
    <input type="checkbox" id="animate" name="animate" value="true" />\r
    <label class="toggle-label" for="animate">Animate</label>\r
  </div>\r
\r
  <div class="circular-progress-bar__hide">\r
    <input type="checkbox" id="hide" name="hide" value="true" />\r
    <label class="toggle-label" for="hide">Hide</label>\r
  </div>\r
</form>\r
`,v='.circular-progress-bar__settings{display:flex;flex-direction:column;gap:8px}.circular-progress-bar__value,.circular-progress-bar__animate,.circular-progress-bar__hide{display:flex;align-items:center;gap:20px}input[type=checkbox]{margin:0;padding:0;display:inline-block;position:relative;width:50px;height:30px;border-radius:100px;background-color:var(--base-accent-color);transition:.5s;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}input[type=checkbox]:after{content:"";width:24px;height:24px;border-radius:100px;top:3px;left:3px;background-color:#fff;position:absolute;transition:.5s}input[type=checkbox]:checked{background-color:var(--accent-color)}input[type=checkbox]:checked:after{left:calc(100% - 3px);transform:translate(-100%)}input[type=number]{margin:0;padding:2px 0 0;width:50px;height:30px;border-radius:100px;font-size:18px;text-align:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;border:none;background-color:var(--base-accent-color)}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}';class y extends HTMLElement{constructor(){super();i(this,"isRendered",!1)}static get observedAttributes(){return l}connectedCallback(){if(!this.isRendered){const r=this.attachShadow({mode:"open"});r.innerHTML=`
        <style>${v}</style>
        ${f}
      `,this.filterValueControl();const a=r.querySelector(".circular-progress-bar__settings");a.addEventListener("submit",e=>{e.preventDefault()}),a.addEventListener("input",()=>{this.filterValueControl();const e=this.getFormValue(a);this.dispatchEvent(new CustomEvent("settings",{detail:{value:e},bubbles:!0,composed:!1}))}),this.isRendered=!0}}attributeChangedCallback(r,a,e){setTimeout(()=>{const t=this.shadowRoot;if(t){const o=t.querySelector(".circular-progress-bar__settings"),c=t.querySelector(`input[name="${r}"]`);r==="value"?c.value=e:c.checked=d(e),o.dispatchEvent(new Event("input"))}},0)}getFormValue(r){const a=new FormData(r),e={};for(const t of l){const o=a.get(t)||"false";e[t]=o}return e}filterValueControl(){const r=this.shadowRoot;if(r){const a=r.querySelector('input[name="value"]'),e=a.value,t=+e;t<0?a.value="0":t>100?a.value="100":/(^0\.\d*$)|(^[1-9]\d*\.?\d*$)|^0$/.test(e)||(a.value=t.toString())}}}customElements.define("circular-progress-bar-settings",y);const _={value:0,isAnimated:!1,isHidden:!1},x=new Map([["value","value"],["is-animated","isAnimated"],["is-hidden","isHidden"]]),w=new Map([["value","value"],["animate","is-animated"],["hide","is-hidden"]]),k="@keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.circular-progress-bar-loader{transform:rotate(-90deg);transition:opacity .4s linear}.circular-progress-bar-loader_hidden{opacity:0}.circular-progress-bar-loader__arc{stroke:var(--accent-color);stroke-width:10px;animation:rotate 2s linear infinite;animation-play-state:paused;transform-origin:center}.circular-progress-bar-loader__arc_animated{animation-play-state:running}.circular-progress-bar-loader__background{stroke:var(--base-accent-color);stroke-width:10px}",E=`<svg class="circular-progress-bar-loader" width="120" height="120">
  <circle class="circular-progress-bar-loader__background" cx="60" cy="60" r="55" fill="transparent" />
  <circle class="circular-progress-bar-loader__arc" cx="60" cy="60" r="55" fill="transparent" />
</svg>`;class T extends HTMLElement{constructor(){super();i(this,"state",_);i(this,"arc",null);i(this,"circle",null);i(this,"isRendered",!1);i(this,"basePath","circular-progress-bar-loader")}get html(){return`
        <style>${k}</style>
        ${E} 
      `}static get observedAttributes(){return["value","is-animated","is-hidden"]}connectedCallback(){if(!this.isRendered){const r=this.attachShadow({mode:"open"});r.innerHTML=this.html,this.render(),this.isRendered=!0}}attributeChangedCallback(r,a,e){const t=x.get(r);this.updateProperty(t,e),this.render()}updateProperty(r,a){const e=r==="value"?+a:d(a);this.state[r]=e}render(){const r=this.shadowRoot;if(r){const a=r.querySelector(`.${this.basePath}`),e=r.querySelector(`.${this.basePath}__arc`);if(this.circle=a,this.arc=e,!this.arc||!this.circle)return;const t=2*Math.PI*this.arc.r.baseVal.value;this.arc.style.strokeDasharray=`${t*this.state.value/100} ${t}`,this.circle.classList.toggle(`${this.basePath}_hidden`,this.state.isHidden),this.arc.classList.toggle(`${this.basePath}__arc_animated`,this.state.isAnimated)}}}customElements.define("circular-progress-bar-loader",T);class P extends HTMLElement{constructor(){super();i(this,"isRendered",!1)}get html(){return`
      <style>${b}</style>
      <article class='circular-progress-bar'>
        <div class='circular-progress-bar__wrapper'>
          <slot name='title'></slot>
          <slot name='loader'></slot>
          <slot name='settings'></slot>
        </div>
      </article>
    `}connectedCallback(){if(!this.isRendered){const r=this.attachShadow({mode:"open"});r.innerHTML=this.html,this.isRendered=!0,r.addEventListener("settings",a=>{const t=a.detail.value,o=r.querySelector('slot[name="loader"]');if(!o){console.error("Couldn't locate 'loader' slot within <circular-progress-bar> component. Make sure you've specified it.");return}const c=o.assignedElements()[0];if(!c){console.error("Couldn't locate any component within 'loader' slot. Make sure you've passed it.");return}for(const[u,p]of Object.entries(t)){const h=w.get(u);c.setAttribute(h,p)}})}}}customElements.define("circular-progress-bar",P);
